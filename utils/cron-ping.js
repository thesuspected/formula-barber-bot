import cron from 'node-cron'
import { db } from '../config/firebase.js'
import { sendBotMessage } from '../barber.js'
import { getEntryBeforeDayNotice, getEntryBeforeHourNotice } from './messages.js'
import { getUserById, getUserLink } from './helpers.js'
import dayjs from '../config/dayjs.js'

const { ADMIN_CHAT_ID } = process.env
const CRON_INTERVAL = 15 // –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö
console.log(`üîî Cron running (every ${CRON_INTERVAL} minutes)`)

const launchNoticeCron = async () => {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î
    const noticesCollection = db.collection('barber-notices')
    const snapshot = await noticesCollection.get()
    if (snapshot.empty) {
        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫—Ä–æ–Ω–∞ –Ω–µ—Ç...')
        return
    }

    // –û—Ç–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –ó–∞–≤—Ç—Ä–∞
    const tomorrowNotices = snapshot.docs
        .map((doc) => {
            return {
                id: doc.id,
                ...doc.data(),
            }
        })
        .filter((notice) => dayjs(notice.date).isTomorrow())
    console.log(`–ó–∞–≤—Ç—Ä–∞ ${tomorrowNotices.length} —É–≤–µ–¥–æ–º–ª.`)

    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    const currentDatetime = dayjs()
    tomorrowNotices.forEach((notice) => {
        const { user_id, user_name, staff_name, date } = notice

        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ —á–∞—Å–∞—Ö
        const noticeDatetime = dayjs(date)
        const hoursDiff = noticeDatetime.diff(currentDatetime, 'hour', true).toFixed(2)
        console.log(`${hoursDiff} —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏.`)

        // –ï—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —Å—É—Ç–∫–∏ –∏ N —á–∞—Å–æ–≤ –¥–æ –∑–∞–ø–∏—Å–∏, –æ—Ç–ø—Ä–∞–≤—è–ª–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (!notice.isNoticeBeforeDaySend && hoursDiff > 23 && hoursDiff < 24) {
            getUserById(user_id).then((user) => {
                const { userData } = user
                const timeString = noticeDatetime.format('HH:mm')
                const noticeLog = `–û—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –∑–∞ 24—á –¥–ª—è <b>${getUserLink(userData)}</b> –Ω–∞ <b>${timeString}</b>`
                console.log(noticeLog)
                sendBotMessage(user_id, getEntryBeforeDayNotice(user_name, staff_name, timeString))
                sendBotMessage(ADMIN_CHAT_ID, noticeLog)
                // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —Å—É—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                noticesCollection.doc(notice.id).update({ isNoticeBeforeDaySend: true })
            })
        } else {
            if (hoursDiff > 24) {
                console.log(`–ü–æ–∑–¥–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ${user_name}, –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ ${noticeDatetime.format('HH:mm')}`)
            } else {
                console.log(`–†–∞–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ${user_name}, –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ ${noticeDatetime.format('HH:mm')}`)
            }
        }
    })

    // –û—Ç–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –°–µ–≥–æ–¥–Ω—è (10:00 - 21:00)
    const todayNotices = snapshot.docs
        .map((doc) => {
            return {
                id: doc.id,
                ...doc.data(),
            }
        })
        .filter((notice) => dayjs(notice.date).isToday())
    console.log(`–°–µ–≥–æ–¥–Ω—è ${todayNotices.length} —É–≤–µ–¥–æ–º–ª.`)

    // TODO: –£–¥–∞–ª—è—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã)

    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
    todayNotices.forEach((notice) => {
        const { user_id, user_name, staff_name, date } = notice

        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ —á–∞—Å–∞—Ö
        const noticeDatetime = dayjs(date)
        const hoursDiff = noticeDatetime.diff(currentDatetime, 'hour', true).toFixed(2)
        console.log(`${hoursDiff} —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏.`)

        // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ N —á–∞—Å–æ–≤ –¥–æ –∑–∞–ø–∏—Å–∏, –æ—Ç–ø—Ä–∞–≤—è–ª–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (hoursDiff < 1.6) {
            getUserById(user_id).then((user) => {
                const { userData } = user
                const timeString = noticeDatetime.format('HH:mm')
                const noticeLog = `–û—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –¥–ª—è <b>${getUserLink(userData)}</b> –Ω–∞ <b>${timeString}</b>`
                console.log(noticeLog)
                sendBotMessage(user_id, getEntryBeforeHourNotice(user_name, staff_name, timeString))
                sendBotMessage(ADMIN_CHAT_ID, noticeLog)
                // –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –±–¥
                noticesCollection.doc(notice.id).delete()
            })
        } else {
            console.log(`–†–∞–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ${user_name}, –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ ${noticeDatetime.format('HH:mm')}`)
        }
    })
}

cron.schedule(`*/${CRON_INTERVAL} * * * *`, async () => {
    console.log('–ö—Ä–æ–Ω —Å–æ–±—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', dayjs().format('DD MMMM YYYY, HH:mm'))
    await launchNoticeCron()
})
