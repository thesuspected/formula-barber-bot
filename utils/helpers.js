import dayjs from 'dayjs'
import { dateLocales } from '../const.js'
import { sendBotMessage } from '../barber.js'
import {
    getDeleteEntryAdminMessage,
    getDeleteEntryUserMessage,
    getNewEntryAdminMessage,
    getNewEntryUserMessage,
    getUpdateEntryAdminMessage,
    getUpdateEntryUserMessage,
} from './messages.js'
import { db, Filter } from '../config/firebase.js'

const { ADMIN_CHAT_ID, DEBUG_CHAT_ID } = process.env

export const sendDebugMessage = async (log, body) => {
    await sendBotMessage(
        DEBUG_CHAT_ID,
        log + `<pre><code class="language-javascript">${JSON.stringify(body, null, 2)}</code></pre>`
    )
}

export const getDateString = (date) => {
    const dayjsDate = dayjs(date)
    return `${dayjsDate.date()} ${dateLocales[dayjsDate.month()]} ${dayjsDate.year()}, –≤ ${dayjsDate.format('HH:mm')}`
}

export const noticeAboutNewEntry = async (user, staff, date) => {
    const dateString = getDateString(date)
    await sendBotMessage(user.id, getNewEntryUserMessage(user, staff, dateString))
    await sendBotMessage(ADMIN_CHAT_ID, getNewEntryAdminMessage(user, staff, dateString))
}

export const noticeAboutUpdateEntry = async (user, staff, date, oldDate) => {
    const dateString = getDateString(date)
    const oldDateString = getDateString(oldDate)
    await sendBotMessage(user.id, getUpdateEntryUserMessage(user, staff, dateString))
    await sendBotMessage(ADMIN_CHAT_ID, getUpdateEntryAdminMessage(user, staff, dateString, oldDateString))
}

export const noticeAboutDeleteEntry = async (user, staff, date) => {
    const dateString = getDateString(date)
    await sendBotMessage(user.id, getDeleteEntryUserMessage(user, staff, dateString))
    await sendBotMessage(ADMIN_CHAT_ID, getDeleteEntryAdminMessage(user, staff, dateString))
}

export const addNewEntryToNoticesCron = async (record_id, user, staff, date) => {
    await db.collection('barber-notices').doc(String(record_id)).set({
        date,
        record_id,
        user_id: user.id,
        user_name: user.first_name,
        staff_name: staff.name,
    })
}

export const getUserByClientPhone = async (phoneNumber, client) => {
    console.log('getUserByClientPhone client =', client)
    try {
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ +7
        const findUserRes = await db.collection('barber-users').where(Filter.where('phone.number', '==', phoneNumber))
        const snapshot = await findUserRes.get()

        if (snapshot.empty) {
            // –û–ø–æ–≤–µ—â–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º
            const err = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${client.name} —Å –Ω–æ–º–µ—Ä–æ–º ${client.phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ`
            console.log(err)
            return
        }
        if (snapshot.size > 1) {
            const err = `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º: ${phoneNumber}`
            console.log(err)
            await sendBotMessage(ADMIN_CHAT_ID, err)
            return
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = snapshot.docs[0].data()
        console.log('–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', user)

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ –±–∞—Ä–±–µ—Ä—à–æ–ø–∞
        await db.collection('barber-users').doc(String(user.id)).set({ client }, { merge: true })

        return user
    } catch (e) {
        console.error(e)
        await sendBotMessage(ADMIN_CHAT_ID, e)
        return false
    }
}

export const getUserByUsername = async (username) => {
    try {
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (–ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑ invited_from)
        const findUserRes = await db.collection('barber-users').where(Filter.where('username', '==', username))
        const snapshot = await findUserRes.get()

        if (snapshot.empty) {
            // –û–ø–æ–≤–µ—â–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            const err = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–Ω–µ–π–º–æ–º ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ`
            console.log(err)
            return
        }
        if (snapshot.size > 1) {
            const err = `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–∏–∫–Ω–µ–π–º–æ–º: ${username}`
            console.log(err)
            await sendBotMessage(ADMIN_CHAT_ID, err)
            return
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = snapshot.docs[0].data()
        console.log('–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', user)
        return user
    } catch (e) {
        console.error(e)
        await sendBotMessage(ADMIN_CHAT_ID, e)
        return false
    }
}

export const updateNoticeByRecordId = async (record_id, date) => {
    const noticeRef = db.collection('barber-notices').doc(String(record_id))
    const doc = await noticeRef.get()
    if (!doc.exists) {
        console.log(`–ó–∞–ø–∏—Å–∏ ‚Ññ${record_id} –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`)
        return false
    }
    const notice = doc.data()
    // –ï—Å–ª–∏ –¥–∞—Ç–∞ –ø–æ–º–µ–Ω—è–ª–∞—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (notice.date !== date) {
        await noticeRef.update({ date })
        console.log(`–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ ‚Ññ${record_id} –∏–∑–º–µ–Ω–µ–Ω–∞ —Å ${getDateString(notice.date)} –Ω–∞ ${getDateString(date)}`)
        return notice
    }
    console.log(`–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ ‚Ññ${record_id} —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π`)
    return false
}

export const deleteNoticeByRecordId = async (record_id) => {
    const noticeRef = db.collection('barber-notices').doc(String(record_id))
    const doc = await noticeRef.get()
    if (!doc.exists) {
        console.log(`–ó–∞–ø–∏—Å–∏ ‚Ññ${record_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`)
        return false
    }
    await noticeRef.delete()
    console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ ‚Ññ${record_id} —É–¥–∞–ª–µ–Ω–æ`)
    return true
}

export const setUserUsedServices = async (user_id) => {
    return await db.collection('barber-users').doc(String(user_id)).update({ used_services: true })
}

export const bonusRewardForReferral = async (username, referral) => {
    const userData = await getUserByUsername(username)
    const userRef = db.collection('barber-users').doc(String(userData.id))

    // –°—á–∏—Ç–∞–µ–º –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    const invite_number = userData.invited.reduce((count, invited_user) => {
        return count + Number(invited_user.used_services)
    }, 1)
    let bonus_reward = 0

    // –°—á–∏—Ç–∞–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ —ç—Ç–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    switch (invite_number) {
        // 1-2 –¥—Ä—É–≥–∞
        case 1:
        case 2:
            bonus_reward = 200
            break
        // 3-5 –¥—Ä—É–∑–µ–π
        case 3:
        case 4:
        case 5:
            bonus_reward = 300
            break
        // –æ—Ç 6 –¥—Ä—É–∑–µ–π
        default:
            bonus_reward = 500
            break
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ—É –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ –≤ –º–∞—Å—Å–∏–≤–µ invited —é–∑–µ—Ä–∞
    const invited = userData.invited.map((invited_user) => {
        console.log(invited_user.user_id, referral.id)
        if (invited_user.user_id === referral.id) {
            return {
                ...invited_user,
                used_services: true,
                bonus_reward: bonus_reward,
            }
        }
        return invited_user
    })
    console.log('invited =', invited)
    await userRef.update({ invited })

    // –ù–∞—á–∏—Å–ª—è–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
    await userRef.update({ balance: userData.balance + bonus_reward })

    return {
        user: userData,
        bonus_reward,
        invite_number,
    }
}

export const getRewardUserMessage = (invited_user, bonus_reward) => {
    return `üí∏ –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${bonus_reward} –±–æ–Ω—É—Å–æ–≤ –Ω–∞ —Å—á–µ—Ç –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ @${invited_user.username}!`
}

export const getRewardAdminMessage = (user, invited_user, invite_number, bonus_reward) => {
    return `<b>üí∏ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤!</b>

<b>–ê–∫–∫–∞—É–Ω—Ç:</b> <a href="https://t.me/${user.username}">${user.username}</a>
<b>–ù–æ–º–µ—Ä:</b> ${user.phone.prefix}${user.phone.number}
<b>–ò–º—è:</b> ${user.first_name ?? ''} ${user.last_name ?? ''}
<b>–ü—Ä–∏—á–∏–Ω–∞:</b> ${invite_number}-—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª <a href="https://t.me/${invited_user.username}">${invited_user.username}</a>
<b>–ù–∞—á–∏—Å–ª–µ–Ω–æ:</b> ${bonus_reward} ‚ÇΩ`
}

export const noticeAboutRewardForReferral = async (rewardInfo, invited_user) => {
    const { user, bonus_reward, invite_number } = rewardInfo
    await sendBotMessage(user.id, getRewardUserMessage(invited_user, bonus_reward))
    await sendBotMessage(ADMIN_CHAT_ID, getRewardAdminMessage(user, invited_user, invite_number, bonus_reward))
}
