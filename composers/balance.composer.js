import { db } from '../config/firebase.js'
import { Composer, Markup } from 'telegraf'
import { CMD } from '../const.js'
import _ from 'lodash'
import { getUserLink } from '../utils/helpers.js'
import { tryCatchWrapper } from '../barber.js'

const composer = new Composer()

const BALANCE_REFRESH = 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'

const getUserData = async (ctx) => {
    const userId = String(ctx.from.id)
    return (await db.collection('barber-users').doc(userId).get()).data()
}

const getBalanceMessage = (user) => {
    return `<u><b>${CMD.BALANCE}</b></u>: ${user.balance} ‚ÇΩ

<blockquote>–ü–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è \n–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ <b>${CMD.BONUS}</b></blockquote>
<blockquote>–ë–æ–Ω—É—Å—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º, –∏–º–∏ –º–æ–∂–Ω–æ \n–æ–ø–ª–∞—á–∏–≤–∞—Ç—å –¥–æ 50% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥ –≤ ¬´–§–æ—Ä–º—É–ª–µ¬ª</blockquote>
`
}

const getReferralsMessage = (user) => {
    let invited = '<u><b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b></u>\n'
    if (user.invited.length) {
        user.invited.forEach((value) => {
            invited += `${getUserLink(value)} - ${value.used_services ? `‚úÖ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ (${value.bonus_reward} ‚ÇΩ)` : '‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏—è'}\n`
        })
        invited += '\n'
    } else {
        invited += '<blockquote>–ó–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ —Ç–æ–±–æ–π –ª—é–¥–∏</blockquote>\n'
    }
    return `\n${invited}–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
<code>https://t.me/FormulaBarberBot?start=${user.id}</code>`
}

const getBalanceReply = (user) => {
    const balanceMessage = getBalanceMessage(user)
    const referralsMessage = getReferralsMessage(user)
    return balanceMessage + referralsMessage
}

const getBalanceKeyboard = () => {
    return Markup.inlineKeyboard([Markup.button.callback(BALANCE_REFRESH, BALANCE_REFRESH)]).resize()
}

composer.hears(CMD.BALANCE, async (ctx) => {
    const user = await getUserData(ctx)
    ctx.session.last_balance = user.balance
    ctx.session.last_invited = user.invited
    await tryCatchWrapper(ctx.replyWithHTML(getBalanceReply(user), getBalanceKeyboard()))
})
composer.command('balance', async (ctx) => {
    const user = await getUserData(ctx)
    ctx.session.last_balance = user.balance
    ctx.session.last_invited = user.invited
    await tryCatchWrapper(ctx.replyWithHTML(getBalanceReply(user), getBalanceKeyboard()))
})
composer.action(BALANCE_REFRESH, async (ctx) => {
    const user = await getUserData(ctx)
    const { last_balance, last_invited } = ctx.session
    // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    if (
        last_balance &&
        last_invited &&
        (!_.isEqual(last_balance, user.balance) || !_.isEqual(last_invited, user.invited))
    ) {
        await tryCatchWrapper(
            ctx.editMessageText(getBalanceReply(user), {
                parse_mode: 'HTML',
                ...getBalanceKeyboard(),
            })
        )
    }
    ctx.session.last_balance = user.balance
    ctx.session.last_invited = user.invited
    setTimeout(() => {
        ctx.answerCbQuery('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    }, 500)
})

export default composer
